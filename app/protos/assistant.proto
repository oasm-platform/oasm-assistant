syntax = "proto3";

package app;

// ----------------
// Health Check
// ----------------
service HealthCheck {
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

message HealthCheckRequest {}

message HealthCheckResponse {
  string message = 1;
}

// ----------------
// Domain Classify
// ----------------
service DomainClassify {
  rpc DomainClassify(DomainClassifyRequest) returns (DomainClassifyResponse);
}

message DomainClassifyRequest {
  string domain = 1;
}
message DomainClassifyResponse {
  repeated string labels = 1;
}

// ----------------
// Nuclei template gen 
// ----------------
service NucleiTemplateService {
  rpc CreateTemplate(CreateTemplateRequest) returns (CreateTemplateResponse);
}
message CreateTemplateRequest {
  string question = 1;
}
message CreateTemplateResponse {
  string answer = 1;
}

// ----------------
// Conversation
// ----------------
service ConversationService {
  rpc GetConversations(GetConversationsRequest) returns (GetConversationsResponse);
  rpc UpdateConversation(UpdateConversationRequest) returns (UpdateConversationResponse);
  rpc DeleteConversation(DeleteConversationRequest) returns (DeleteConversationResponse);
  rpc DeleteConversations(DeleteConversationsRequest) returns (DeleteConversationsResponse);
}

message Conversation {
  string conversation_id = 1;
  string title = 2;
  string description = 3;
  string embedding = 4;
  string created_at = 5;
  string updated_at = 6;
}

message GetConversationsRequest {
}

message GetConversationsResponse {
  repeated Conversation conversations = 1;
}

message UpdateConversationRequest {
  string conversation_id = 1;
  string title = 2;
  string description = 3;
}

message UpdateConversationResponse {
  Conversation conversation = 1;
}

message DeleteConversationRequest {
  string conversation_id = 1;
}

message DeleteConversationResponse {
  string message = 1;
  bool success = 2;
}

message DeleteConversationsRequest {
}

message DeleteConversationsResponse {
  string message = 1;
  bool success = 2;
}

// ----------------
// Message
// ----------------
service MessageService {
  rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
  rpc CreateMessage(CreateMessageRequest) returns (CreateMessageResponse);
  rpc UpdateMessage(UpdateMessageRequest) returns (UpdateMessageResponse);
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);
}

message Message {
  string message_id = 1;
  string question = 2;
  string answer = 3;
  string conversation_id = 4;
  string embedding = 5;
  string created_at = 6;
  string updated_at = 7;
}

message GetMessagesRequest {
  string conversation_id = 1;
}

message GetMessagesResponse {
  repeated Message messages = 1;
}

message CreateMessageRequest {
  string question = 1;
  string conversation_id = 2;
  bool is_create_conversation = 3;
}

message CreateMessageResponse {
  Message message = 1;
}

message UpdateMessageRequest {
  string message_id = 1;
  string question = 2;
}

message UpdateMessageResponse {
  Message message = 1;
}

message DeleteMessageRequest {
  string message = 1;
}

message DeleteMessageResponse {
  string message = 1;
  bool success = 2;
}

// ----------------
// MCP Server
// ----------------
service MCPServerService {
  rpc AddMCPServer(AddMCPServerRequest) returns (AddMCPServerResponse);
  rpc ListMCPServers(ListMCPServersRequest) returns (ListMCPServersResponse);
  rpc GetMCPServerStatus(GetMCPServerStatusRequest) returns (GetMCPServerStatusResponse);
  rpc UpdateMCPServer(UpdateMCPServerRequest) returns (UpdateMCPServerResponse);
  rpc DeleteMCPServer(DeleteMCPServerRequest) returns (DeleteMCPServerResponse);
}

enum MCPServerStatus {
  UNKNOWN = 0;
  RUNNING = 1;
  STOPPED = 2;
  ERROR = 3;
  STARTING = 4;
  STOPPING = 5;
}

message MCPServer {
  string id = 1;
  string workspace_id = 2;
  string user_id = 3;
  string mcp_config = 4;  // JSON string containing all MCP configuration
  string server_status = 5;  // Server status: active, inactive, disabled
  int32 latency = 6;  // Server latency in milliseconds
  string created_at = 7;
  string updated_at = 8;
}

message AddMCPServerRequest {
  string workspace_id = 1;
  string user_id = 2;
  string mcp_config = 3;  // JSON string containing all MCP configuration
}

message AddMCPServerResponse {
  MCPServer server = 1;
  bool success = 2;
  string message = 3;
}

message ListMCPServersRequest {
  string workspace_id = 1;
  string user_id = 2;
  bool only_active = 3;
}

message ListMCPServersResponse {
  repeated MCPServer servers = 1;
  int32 total_count = 2;
}

message GetMCPServerStatusRequest {
  string server_id = 1;
}

message GetMCPServerStatusResponse {
  string server_id = 1;
  string server_name = 2;
  MCPServerStatus status = 3;
  string status_message = 4;
  bool is_connected = 5;
  int64 uptime_seconds = 6;
  string last_error = 7;
  string last_ping = 8;
}

message UpdateMCPServerRequest {
  string server_id = 1;
  string mcp_config = 2;  // JSON string containing updated MCP configuration
}

message UpdateMCPServerResponse {
  MCPServer server = 1;
  bool success = 2;
  string message = 3;
}

message DeleteMCPServerRequest {
  string server_id = 1;
}

message DeleteMCPServerResponse {
  bool success = 1;
  string message = 2;
}
