from sqlalchemy import Column, String, Float, Boolean, Text, Index
from sqlalchemy.dialects.postgresql import UUID
from uuid import uuid4
from .base import BaseEntity

class ExploitIntelligence(BaseEntity):
    """
    Exploit intelligence and availability data
    Tracks public exploits, PoCs, active exploitation
    """

    __tablename__ = "exploit_intelligence"
    __table_args__ = (
        Index('idx_exploit_cve', 'cve_id'),
        Index('idx_exploit_actively_exploited', 'is_actively_exploited'),
        Index('idx_exploit_cisa_kev', 'cisa_kev'),
        {'extend_existing': True}
    )

    exploit_id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)

    # Vulnerability reference
    cve_id = Column(String(50), nullable=False, comment="CVE identifier")

    # Exploit source
    exploit_source = Column(String(100), comment="ExploitDB, GitHub, Metasploit, etc.")
    exploit_url = Column(Text, comment="URL to exploit code")
    exploit_title = Column(String(500), comment="Exploit title/description")

    # Exploit maturity
    exploit_maturity = Column(String(50), comment="Unproven, PoC, Functional, High")
    exploit_type = Column(String(50), comment="Remote, Local, DoS, etc.")

    # EPSS (Exploit Prediction Scoring System)
    epss_score = Column(Float, comment="EPSS score (0.0-1.0)")
    epss_percentile = Column(Float, comment="EPSS percentile (0.0-100.0)")

    # Active exploitation
    is_actively_exploited = Column(Boolean, default=False, comment="Currently exploited in the wild")
    exploitation_count = Column(Float, comment="Number of exploitation instances")

    # CISA KEV (Known Exploited Vulnerabilities)
    cisa_kev = Column(Boolean, default=False, comment="In CISA KEV catalog")
    cisa_due_date = Column(String(50), comment="CISA remediation due date")

    # Additional intelligence
    exploitability_ease = Column(String(50), comment="Ease of exploitation")
    public_poc_available = Column(Boolean, default=False, comment="Public PoC available")
    metasploit_module = Column(Boolean, default=False, comment="Metasploit module exists")

    # Notes
    notes = Column(Text, comment="Additional intelligence notes")
